// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { maybeFilter } from '@nuntly/sdk-mcp/filtering';
import { Metadata, asTextContentResult } from '@nuntly/sdk-mcp/tools/types';

import { Tool } from '@modelcontextprotocol/sdk/types.js';
import Nuntly from '@nuntly/sdk';

export const metadata: Metadata = {
  resource: 'organizations.subscriptions',
  operation: 'read',
  tags: [],
  httpMethod: 'get',
  httpPath: '/organizations/{id}/subscriptions',
  operationId: 'list-organizations-subscriptions',
};

export const tool: Tool = {
  name: 'list_organizations_subscriptions',
  description:
    "When using this tool, always use the `jq_filter` parameter to reduce the response size and improve performance.\n\nOnly omit if you're sure you don't need the data.\n\nReturn the organization subscriptions\n\n# Response Schema\n```json\n{\n  type: 'object',\n  properties: {\n    data: {\n      type: 'array',\n      items: {\n        type: 'object',\n        properties: {\n          cancel_at: {\n            type: 'string',\n            description: 'If the subscription has been canceled, the date of that cancellation'\n          },\n          cancel_at_period_end: {\n            type: 'boolean',\n            description: 'Whether this subscription will or did cancel at the end of the current billing period'\n          },\n          current_period_end: {\n            type: 'string',\n            description: 'End of the current period that the subscription has been invoiced for'\n          },\n          current_period_start: {\n            type: 'string',\n            description: 'Start of the current period that the subscription has been invoiced for'\n          },\n          org_id: {\n            type: 'string',\n            description: 'The id of the organization'\n          },\n          price: {\n            type: 'object',\n            properties: {\n              currency: {\n                type: 'string',\n                description: 'ISO currency code'\n              },\n              recurring: {\n                type: 'object',\n                properties: {\n                  interval: {\n                    type: 'string',\n                    description: 'The frequency at which a subscription is billed.',\n                    enum: [                      'day',\n                      'month',\n                      'week',\n                      'year'\n                    ]\n                  },\n                  interval_count: {\n                    type: 'number',\n                    description: 'The number of intervals between subscription billings'\n                  }\n                }\n              },\n              unit_amount: {\n                type: 'number',\n                description: 'The unit amount in cents (or local equivalent) to be charged'\n              }\n            },\n            required: [              'currency',\n              'recurring',\n              'unit_amount'\n            ]\n          },\n          status: {\n            type: 'string',\n            description: 'The status of the subscription (plan or addon',\n            enum: [              'active',\n              'canceled',\n              'incomplete',\n              'incomplete_expired',\n              'past_due',\n              'paused',\n              'trialing',\n              'unpaid'\n            ]\n          },\n          type: {\n            type: 'string',\n            description: 'The type of the subscription',\n            enum: [              'plan',\n              'addon'\n            ]\n          },\n          addon: {\n            type: 'string',\n            description: 'The name of the addon',\n            enum: [              'dedicated-ips'\n            ]\n          },\n          plan: {\n            type: 'string',\n            description: 'The name of the plan',\n            enum: [              'free',\n              'starter',\n              'scale',\n              'enterprise'\n            ]\n          },\n          quota: {\n            type: 'object',\n            properties: {\n              daily: {\n                type: 'object',\n                properties: {\n                  transac_emails: {\n                    type: 'number',\n                    description: 'The quota of the emails subscribed (if applicable)'\n                  }\n                },\n                required: [                  'transac_emails'\n                ]\n              },\n              monthly: {\n                type: 'object',\n                properties: {\n                  transac_emails: {\n                    type: 'number',\n                    description: 'The quota of the emails subscribed (if applicable)'\n                  }\n                },\n                required: [                  'transac_emails'\n                ]\n              }\n            },\n            required: [              'daily',\n              'monthly'\n            ]\n          },\n          schedule: {\n            type: 'object',\n            properties: {\n              created: {\n                type: 'string',\n                description: 'The date of the creation of the schedule'\n              },\n              phases: {\n                type: 'array',\n                items: {\n                  type: 'object',\n                  properties: {\n                    price: {\n                      type: 'object',\n                      properties: {\n                        currency: {\n                          type: 'string',\n                          description: 'ISO currency code'\n                        },\n                        recurring: {\n                          type: 'object',\n                          properties: {\n                            interval: {\n                              type: 'string',\n                              description: 'The frequency at which a subscription is billed.',\n                              enum: [                                'day',\n                                'month',\n                                'week',\n                                'year'\n                              ]\n                            },\n                            interval_count: {\n                              type: 'number',\n                              description: 'The number of intervals between subscription billings'\n                            }\n                          }\n                        },\n                        type: {\n                          type: 'string',\n                          description: 'The type of the subscription',\n                          enum: [                            'plan',\n                            'addon'\n                          ]\n                        },\n                        unit_amount: {\n                          type: 'number',\n                          description: 'The unit amount in cents (or local equivalent) to be charged'\n                        },\n                        plan: {\n                          type: 'string',\n                          description: 'The name of the plan',\n                          enum: [                            'free',\n                            'starter',\n                            'scale',\n                            'enterprise'\n                          ]\n                        },\n                        quota: {\n                          type: 'object',\n                          properties: {\n                            daily: {\n                              type: 'object',\n                              properties: {\n                                transac_emails: {\n                                  type: 'number',\n                                  description: 'The quota of the emails subscribed (if applicable)'\n                                }\n                              },\n                              required: [                                'transac_emails'\n                              ]\n                            },\n                            monthly: {\n                              type: 'object',\n                              properties: {\n                                transac_emails: {\n                                  type: 'number',\n                                  description: 'The quota of the emails subscribed (if applicable)'\n                                }\n                              },\n                              required: [                                'transac_emails'\n                              ]\n                            }\n                          },\n                          required: [                            'daily',\n                            'monthly'\n                          ]\n                        }\n                      },\n                      required: [                        'currency',\n                        'recurring',\n                        'type',\n                        'unit_amount'\n                      ]\n                    }\n                  },\n                  required: [                    'price'\n                  ]\n                }\n              }\n            },\n            required: [              'created',\n              'phases'\n            ]\n          }\n        },\n        required: [          'cancel_at',\n          'cancel_at_period_end',\n          'current_period_end',\n          'current_period_start',\n          'org_id',\n          'price',\n          'status',\n          'type'\n        ]\n      }\n    }\n  }\n}\n```",
  inputSchema: {
    type: 'object',
    properties: {
      id: {
        type: 'string',
      },
      jq_filter: {
        type: 'string',
        title: 'jq Filter',
        description:
          'A jq filter to apply to the response to include certain fields. Consult the output schema in the tool description to see the fields that are available.\n\nFor example: to include only the `name` field in every object of a results array, you can provide ".results[].name".\n\nFor more information, see the [jq documentation](https://jqlang.org/manual/).',
      },
    },
    required: ['id'],
  },
  annotations: {
    readOnlyHint: true,
  },
};

export const handler = async (client: Nuntly, args: Record<string, unknown> | undefined) => {
  const { id, jq_filter, ...body } = args as any;
  return asTextContentResult(await maybeFilter(jq_filter, await client.organizations.subscriptions.list(id)));
};

export default { metadata, tool, handler };
